prefix ec2u: <https://data.ec2u.eu/terms/>
prefix void: <http://rdfs.org/ns/void#>
prefix dct: <http://purl.org/dc/terms/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>


#### Complete Datasets Descriptions ####################################################################################

insert {

    ?dataset
        rdfs:label ?title ;
        rdfs:comment ?description.

} where {

    ?dataset a ec2u:Dataset ;
        dct:title ?title ;
        dct:description ?description .

};


    #### Compute Datasets Aliases ######################################################################################

insert {

    ?alias rdfs:isDefinedBy ?dataset.

} where {

    ?dataset a ec2u:Dataset .

    bind(iri(replace(str(?dataset), "^https://data.ec2u.eu/(\\w+)?/$", "https://data.ec2u.eu/datasets/$1" )) as ?alias)

};


    #### Compute Datasets Size #########################################################################################

insert {

    ?dataset void:entities ?entities

} where {

    {
        select ?dataset (count(distinct ?entity) as ?entities) {

            ?dataset a ec2u:Dataset ;
                void:rootResource ?class .

            optional { ?entity a ?class }

        }
        group by ?dataset
    }

};


    #### Compute Dataset University Partitions Size ####################################################################

insert {

    ?dataset void:subset ?subset .
    ?university dct:extent ?subset .

    ?subset
        ec2u:university ?university ;
        void:entities ?entities .

} where {

    bind (uuid() as ?subset)

    {
        select ?dataset ?university (count(distinct ?entity) as ?entities)

        where {

            ?dataset a ec2u:Dataset ;
                dct:available [] ;
                void:rootResource ?class .

            ?entity a ec2u:Resource,
                    ?class ;
                ec2u:university ?university .

        }

        group by ?dataset ?university
    }

}