/*
 * Copyright © 2020-2025 EC2U Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.ec2u.work.ai;

import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Supplier;

import static java.util.function.Predicate.not;
import static java.util.stream.Collectors.joining;

/**
 * Text embedding generator.
 */
@FunctionalInterface
public interface Embedder {

    /**
     * Retrieves the default text embedder factory.
     *
     * @return the default text embedder factory, which throws an exception reporting the service as undefined
     */
    static Supplier<Embedder> embedder() {
        return () -> { throw new IllegalStateException("undefined text embedder service"); };
    }


    static String embeddable(final Collection<String> strings) {

        if ( strings == null || strings.stream().anyMatch(Objects::isNull) ) {
            throw new NullPointerException("null strings");
        }

        return strings.stream()
                .distinct()
                .filter(not(String::isBlank))
                .map("- %s\n"::formatted)
                .collect(joining());
    }

    Optional<Vector> embed(String text);


    //̸/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Cache text embedder.
     *
     * <p>Returns and caches the embeddings generated by a delegate.</p>
     */
    final class CacheEmbedder implements Embedder, AutoCloseable {

        private final Embedder embedder;

        private final Map<String, Vector> cache=new ConcurrentHashMap<>();


        /**
         * Creates a new cache text embedder.
         *
         * @param embedder the delegate embedder
         *
         * @throws NullPointerException if {@code embedder} is null
         */
        public CacheEmbedder(final Embedder embedder) {

            if ( embedder == null ) {
                throw new NullPointerException("null embedder");
            }

            this.embedder=embedder;
        }


        @Override
        public Optional<Vector> embed(final String text) {

            if ( text.isBlank() ) { return Optional.empty(); } else {

                return Optional.ofNullable(cache.computeIfAbsent(text, key -> embedder
                        .embed(text)
                        .orElse(null)
                ));

            }

        }

        @Override
        public void close() throws Exception {

            if ( embedder instanceof final AutoCloseable closeable ) {
                closeable.close();

            }

        }

    }

}
