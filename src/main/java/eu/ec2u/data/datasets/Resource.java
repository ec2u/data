/*
 * Copyright © 2020-2025 EC2U Alliance
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.ec2u.data.datasets;

import com.metreeca.mesh.meta.jsonld.*;
import com.metreeca.mesh.meta.jsonld.Class;
import com.metreeca.mesh.meta.shacl.Required;

import eu.ec2u.data.datasets.universities.University;

import java.net.URI;
import java.util.Locale;
import java.util.Optional;
import java.util.function.Function;

import static com.metreeca.flow.Locator.service;
import static com.metreeca.flow.services.Logger.logger;

import static eu.ec2u.data.Data.BASE;
import static java.lang.String.format;

@Frame
@Class
@Base(BASE)
@Namespace(prefix="[ec2u]", value="/terms/")
public interface Resource extends Reference {

    /**
     * Maps a function to the locale of a resource's university.
     *
     * <p>This utility method retrieves the primary locale associated with the resource's university
     * and applies the provided mapper function to it. If the resource has no university, or the university has no
     * locale defined, a warning is logged and null is returned.</p>
     *
     * @param <V>      the resource type
     * @param <R>      the mapped result type
     * @param resource the resource whose university locale is to be used; must not be null
     * @param mapper   the function to apply to the locale; must not be null
     *
     * @return the result of applying the mapper to the resource's university locale, or {@code null} if the resource
     *         has no university or the university has no locale
     *
     * @throws NullPointerException if either {@code resource} or {@code mapper} is {@code null}
     */
    static <V extends Resource, R> R localize(final V resource, final Function<Locale, R> mapper) {

        if ( resource == null ) {
            throw new NullPointerException("null resource");
        }

        if ( mapper == null ) {
            throw new NullPointerException("null mapper");
        }

        return Optional.of(resource).map(Resource::university).map(University::locale).map(mapper).orElseGet(() -> {

            service(logger()).warning(Resource.class, format(
                    "undefined locale for <%s> <%s>",
                    resource.getClass().getSimpleName(),
                    Optional.ofNullable(resource.id()).map(Object::toString).orElse("?")
            ));

            return null;

        });
    }


    //̸/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * @return {@code true}, if the resource is even partially generated by AI tools; {@code false}, otherwise
     */
    boolean generated();

    String version();


    @Required
    @Forward
    @Reverse("rdfs:member")
    Dataset dataset();

    University university();


    @Hidden
    URI pipeline();

    @Hidden
    String embedding();

}
